generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     String
  productId  Int      @unique
  size       Int
  quantity   Int
  created_at DateTime @db.DateTime(0)
  products   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(45)
  description   String     @db.VarChar(100)
  category_slug String     @map("category-slug") @db.VarChar(45)
  created_at    DateTime?  @db.DateTime(0)
  products      Products[]
}

model Orderdetails {
  id        Int      @id @default(autoincrement())
  paymentId Int
  productId Int
  quantity  Int
  size      Int
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  products  Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int            @id @default(autoincrement())
  userId        Int
  paymentId     String         @db.VarChar(200)
  date          DateTime       @db.Date
  order_details Orderdetails[]
}

model Productimage {
  id           Int      @id @default(autoincrement())
  productId    Int
  product_slug String   @db.VarChar(60)
  image        String   @db.VarChar(45)
  products     Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Products {
  id            Int            @id @default(autoincrement())
  categoryId    Int
  name          String         @db.VarChar(100)
  description   String         @db.VarChar(1000)
  product_slug  String         @unique(map: "product_slug") @db.VarChar(100)
  price         Int
  photo         String         @db.VarChar(100)
  created_at    DateTime?      @db.Date
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  cart          Cart[]
  order_details Orderdetails[]
  product_image Productimage[]
  wishlist      Wishlist[]
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  cart          Cart[]
  user_address  Useraddress[]
  wishlist      Wishlist[]
  accounts      Account[]
  sessions      Session[]
}

model Useraddress {
  id          Int     @id @default(autoincrement())
  userId      String
  city        String  @db.VarChar(45)
  postal_code String? @db.VarChar(45)
  mobile      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id         Int       @id @default(autoincrement())
  productId  Int
  userId     String
  size       Int
  quantity   Int
  created_at DateTime? @db.DateTime(0)
  products   Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
